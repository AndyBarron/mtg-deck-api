import bcrypt from 'bcrypt';
import { MONGODB_URI, PORT } from 'config';
import Koa from 'koa';
import bodyParser from 'koa-bodyparser';
import KoaRouter from 'koa-router';
import Token from 'models/Token';
import User, { USERNAME_REGEX } from 'models/User';
import mongoose from 'mongoose';
mongoose.Promise = Promise;
import validator from 'validator';

mongoose.connect(MONGODB_URI, { useMongoClient: true });

const app = new Koa();
const router = new KoaRouter();

router.get('/', async (ctx) => {
  ctx.body = {message: 'Hello, World!'};
});

router.get('/user/:username', async (ctx) => {
  const { username } = ctx.params;
  const canonicalUsername = username.toLowerCase();
  const user = await User.findOne({ canonicalUsername });
  if (user) {
    return ctx.body = { user };
  } else {
    return ctx.throw(404, 'No such user');
  }
});

router.post('/user', async (ctx) => {

  const { email, password, username } = ctx.request.body;

  if (!validator.isEmail(email)) {
    return ctx.throw(400, 'Invalid email address');
  }

  if (!validator.isLength(password, {min: 8})) {
    return ctx.throw(400, 'Password too short');
  }

  if (!username) {
    return ctx.throw(400, 'Missing username');
  }

  if (typeof username !== 'string' || !USERNAME_REGEX.test(username)) {
    return ctx.throw(400, 'Invalid username');
  }

  const existing = await User.findByUsername(username);
  if (existing) {
    return ctx.throw(409, 'Username is taken');
  }

  const canonicalUsername = username.toLowerCase();
  const passwordHash = await bcrypt.hash(password, 10);

  const user = new User({
    canonicalUsername,
    email,
    passwordHash,
    username,
  });

  await user.save();

  // TODO: Generate token? (Maybe if it's specified in the request body)
  ctx.body = {};

});

router.post('/token', async (ctx) => {

  const { username, password } = ctx.request.body;

  if (!username) {
    return ctx.throw(400, 'Missing username');
  }

  if (typeof username !== 'string') {
    return ctx.throw(400, 'Invalid username');
  }

  if (!password) {
    return ctx.throw(400, 'Missing password');
  }

  if (typeof password !== 'string') {
    return ctx.throw(400, 'Invalid password');
  }

  const canonicalUsername = username.toLowerCase();
  const user = await User.findByUsername(username)
    .select(['_id', 'passwordHash']);
  if (!user) {
    return ctx.throw(401, 'Incorrect credentials');
  }
  const {_id, passwordHash} = user;
  console.log(_id, passwordHash);

  const correct = await bcrypt.compare(password, passwordHash);

  if (!correct) {
    return ctx.throw(401, 'Incorrect credentials');
  }

  const value = 'abc'; // TODO randomly generate
  const hash = await bcrypt.hash(value, 10);
  const token = new Token({
    _id: mongoose.Schema.Types.ObjectId(),
    user: _id,
    hash,
  });

  ctx.body = {
    token: "<insert valid token here if auth succeeds>",
  };
});

app.use(async (ctx, next) => {
  try {
    await next();
  } catch (error) {
    console.error(error);
    const message = error.expose ? error.message : 'Unknown error';
    const status = error.statusCode || error.status || 500;
    ctx.status = status;
    ctx.body = {
      error: {
        message,
      },
    };
  }
});

app.use(bodyParser({
  enableTypes: ['json'],
  onerror: (error, ctx) => {
    ctx.throw('invalid request body', 400);
  },
}));
app.use(router.routes());
app.use(router.allowedMethods());

app.listen(PORT, () => console.info(`API listening on port ${PORT}`));
